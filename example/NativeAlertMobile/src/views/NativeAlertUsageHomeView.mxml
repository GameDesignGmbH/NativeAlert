<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" title="Native Alerts" creationComplete="view_creationComplete()" backKeyPressed="view1_backKeyPressedHandler(event)" 
		>
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			import mx.utils.ObjectUtil;
			
			import pl.mateuszmackowiak.nativeANE.NativeDialogEvent;
			import pl.mateuszmackowiak.nativeANE.NativeDialogListEvent;
			import pl.mateuszmackowiak.nativeANE.alert.NativeAlert;
			import pl.mateuszmackowiak.nativeANE.dialogs.NativeListDialog;
			import pl.mateuszmackowiak.nativeANE.dialogs.NativeTextField;
			import pl.mateuszmackowiak.nativeANE.dialogs.NativeTextInputDialog;
			import pl.mateuszmackowiak.nativeANE.notification.NativeNotifiction;
			import pl.mateuszmackowiak.nativeANE.progress.NativeProgress;
			import pl.mateuszmackowiak.nativeANE.properties.SystemProperties;
			import pl.mateuszmackowiak.nativeANE.toast.Toast;
			
			import spark.events.IndexChangeEvent;
			import spark.events.ViewNavigatorEvent;
			import spark.layouts.HorizontalLayout;
			import spark.layouts.VerticalLayout;
			
			
			
			
			private var progressPopup:NativeProgress;
			private var p:int = 0;
			private var myTimer:Timer = new Timer(100);
			private var multChDialog:NativeListDialog=null;
			private var singleChDialog:NativeListDialog=null;
			private var textInputDialog:NativeTextInputDialog=null;
			private var choces:Vector.<String>=null;
			private var checkedItems:Vector.<Boolean>=null;
			private var selectedIndex:int = 2;
			
			


			
			protected function view_creationComplete():void
			{
				var isTablet:Boolean = height > 900 || width > 900;
				if(isTablet){
					currentState = "tablet";
					content.layout = new HorizontalLayout();
				}else{
					currentState = "phone";
					content.layout = new VerticalLayout();
				}
				
				FlexGlobals.topLevelApplication.addEventListener(UncaughtErrorEvent.UNCAUGHT_ERROR,onError);
				FlexGlobals.topLevelApplication.addEventListener(ErrorEvent.ERROR,onError);
				
				NativeApplication.nativeApplication.addEventListener(Event.EXITING,exiting);
								
				
				choces = new Vector.<String>();
				choces.push("one","two","three","four");
				checkedItems = new Vector.<Boolean>();
				checkedItems.push(true,false,false,true);
				
				if(SystemProperties.isAndroid()){
					titleInput.text = "Some <b>simple HTML</b> Title";
					messageInput.text = "Some <i>simple HTML</i> Message Text";

					ThemeSelector.dataProvider = themesAndroid;
					ThemeSelector.selectedItem = themesAndroid.getItemAt(0);
				}else if (SystemProperties.isIOS()){
					
					mess("can open url http://maps.google.com/maps?ll=-37.812022,144.969277 " +SystemProperties.getInstance().canOpenUrl("http://maps.google.com/maps?ll=-37.812022,144.969277"));
					
					titleInput.text = "Some Title";
					messageInput.text = "Some Message Text";
					
					ThemeSelector.dataProvider = themesIOS;
					ThemeSelector.selectedItem = themesIOS.getItemAt(0);
				}else{
					mess("extension is NOT supported on this device");
				}
				
				
				listAllPropertiesFromSystemProperties();

			}
			
			
			
			
			
			protected function exiting(event:Event):void
			{
				NativeAlert.dispose();
				SystemProperties.getInstance().dispose();
				Toast.dispose();
			}
			private function onError(event:*):void
			{
				if(event is UncaughtErrorEvent){
					const e:UncaughtErrorEvent = event;
					if(e.error is Error){
						mess("UncaughtErrorEvent Error "+ (e.error as Error).message+"   "+(e.error as Error).toString());
					}else{
						mess("UncaughtErrorEvent ErrorEvent "+ (e.error as ErrorEvent).text+"   "+(e.error as ErrorEvent).toString());
					}
				}else{
					mess("Error "+ event.text+"   "+event.toString());
				}
			}
			private function traceEvent(event:*):void
			{
				if(event.hasOwnProperty("text")){
					mess(event.toString()+"  "+event.text);
				}
				else{
					mess(event.toString());
				}
			}
			protected function view1_backKeyPressedHandler(event:FlexEvent):void
			{
				event.preventDefault();
				mess("back key pressed");
				
				myTimer.removeEventListener(TimerEvent.TIMER,updateProgress);
				myTimer.stop();
				p = 0;
				if(progressPopup){
					progressPopup.hide();
				}
			}
			
			
			
			
			
		
			
			
			public function listAllPropertiesFromSystemProperties():void
			{
				if(SystemProperties.isSupported){
					var dictionary:Dictionary = SystemProperties.getInstance().getSystemProperites();//SystemProperties.getProperites();
					if(!dictionary){
						mess("return null dictionary");
						return;
					}
						
					mess("--------------------");
					for (var key:String in dictionary) 
					{ 
						var readingType:String = key; 
						var readingValue:String = dictionary[key]; 
						mess(readingType + "=" + readingValue); 
					} 
					mess("--------------------");
					dictionary = null;
				}else{
					mess("SystemProperties is NOT supported on this platform!!");
				}
			}
			
			
			
			protected function callAlert(event:MouseEvent):void
			{
					NativeAlert.show(messageInput.text,titleInput.text+"0001",closeLabelInput.text, otherLabels.text
						, function closeFun(event:NativeDialogEvent):void
						{
							var n:NativeAlert = event.target as NativeAlert;
							//event.preventDefault();
							//n.show();
							mess(event.toString());
						}
						,canclebleCheckbox.selected,ThemeSelector.selectedItem.data);
					
					
					
					NativeAlert.show(messageInput.text,titleInput.text+"0002",closeLabelInput.text, otherLabels.text
						, function closeFun(event:NativeDialogEvent):void
						{
							var n:NativeAlert = event.target as NativeAlert;
							//event.preventDefault();
							//n.show();
							mess(event.toString());
						}
						,canclebleCheckbox.selected,ThemeSelector.selectedItem.data);
					
					/*var n2:NativeAlert = NativeAlert.show(messageInput.text,titleInput.text,closeLabelInput.text, otherLabels.text
						,null
						,canclebleCheckbox.selected,ThemeSelector.selectedItem.data);
					n2.addEventListener(NativeDialogEvent.CLOSED,function(event:NativeDialogEvent):void{
						var n:NativeAlert = event.target as NativeAlert;
						//event.preventDefault();
						//n.show();
						mess(event.toString());
					});*/
			}
			
			
			
			
			
			
			
			//---------------------------------------------------------------------
			//
			// NativeProgress.
			//
			//---------------------------------------------------------------------
			protected function openProgressPopup(style:int):void
			{
				try{
					progressPopup = new NativeProgress(style);
					progressPopup.setSecondaryProgress(45);
					progressPopup.addEventListener(NativeDialogEvent.CANCELED,closeNativeProgressHandler);
					progressPopup.addEventListener(NativeDialogEvent.OPENED,traceEvent);
					progressPopup.addEventListener(NativeDialogEvent.CLOSED,closeNativeProgressHandler);
					progressPopup.addEventListener(ErrorEvent.ERROR,onError);
					progressPopup.androidTheme = ThemeSelector.selectedItem.data;
					progressPopup.iosTheme = ThemeSelector.selectedItem.data;
					progressPopup.setMax(50);
					progressPopup.setTitle(titleInput.text);
					progressPopup.setMessage(messageInput.text);
					progressPopup.show(canclebleCheckbox.selected,indeterminateInput.selected);
					
					myTimer.addEventListener(TimerEvent.TIMER, updateProgress);
					myTimer.start();
				}catch(e:Error){
					mess("Error "+ e.message+"   "+e.toString());
				}
			}
			private function closeNativeProgressHandler(event:NativeDialogEvent):void
			{
				mess(event.toString());
				
				progressPopup.removeEventListener(NativeDialogEvent.CANCELED,closeNativeProgressHandler);
				progressPopup.removeEventListener(NativeDialogEvent.CLOSED,closeNativeProgressHandler);
				progressPopup.removeEventListener(NativeDialogEvent.OPENED,traceEvent);
				progressPopup.removeEventListener(ErrorEvent.ERROR,onError);
				progressPopup.dispose();
				
				myTimer.removeEventListener(TimerEvent.TIMER,updateProgress);
				myTimer.stop();
				p = 0;
			}
			private function updateProgress(event:TimerEvent):void
			{
				p++;
				if(p>=50){
					p = 0;
					progressPopup.hide("with some message",true);
					(event.target as Timer).stop();
				}
				else{
					if(p>=25){
						progressPopup.setMessage("some message changed in between");
						progressPopup.setTitle("some title changed in between");
					}
					try{
						if(progressPopup.indeterminate==false)
							progressPopup.setProgress(p);
					}catch(e:Error){
						mess("Error "+ e.message+"   "+e.toString());
					}
				}
			}
			
			
			
			//---------------------------------------------------------------------
			//
			// Toast
			//
			//---------------------------------------------------------------------
			public function showToast(event:MouseEvent):void
			{
				Toast.show(messageInput.text,Toast.LENGTH_LONG);
			}
			
			public function showCenteredToast(event:MouseEvent):void
			{
				var randX:int = Math.random()*600;
				var randY:int = Math.random()*600;
				Toast.showWithDifferentGravit(messageInput.text,Toast.LENGTH_SHORT,Toast.GRAVITY_LEFT,randX,randY);
			}

			
			
			//---------------------------------------------------------------------
			//
			// TextInputDialog
			//
			//---------------------------------------------------------------------
			public function openTextInputDialog(event:MouseEvent):void{
				textInputDialog = new NativeTextInputDialog();
				textInputDialog.theme = ThemeSelector.selectedItem.data;
				
				textInputDialog.addEventListener(NativeDialogEvent.CANCELED,onCancleTextInputDialogHandler);
				textInputDialog.addEventListener(NativeDialogEvent.OPENED,traceEvent);
				textInputDialog.addEventListener(ErrorEvent.ERROR,onError);
				textInputDialog.addEventListener(NativeDialogEvent.CLOSED,onCloseTextInputDialogHandler);
				
				var v:Vector.<NativeTextField> = new Vector.<NativeTextField>();
				
				var message:NativeTextField = new NativeTextField(null);
				message.text = "pleas enter adress";
				message.editable = false;
				v.push(message);
				
				var serverAdressTextInput:NativeTextField = new NativeTextField("serverAdress");
				serverAdressTextInput.displayAsPassword = true;
				serverAdressTextInput.prompText = "192.168.0.1:8080";
				serverAdressTextInput.softKeyboardType = SoftKeyboardType.URL;
				serverAdressTextInput.addEventListener(Event.CHANGE,traceEvent);
				v.push(serverAdressTextInput);
				
				var a:Array = otherLabels.text.split(",");
				var buttons:Vector.<String> = new Vector.<String>();
				if(a==null || a.length==0)
					buttons.push(closeLabelInput.text);
				else{
					a.unshift(closeLabelInput.text);
					for each (var button:String in a) 
					{
						buttons.push(button);
					}
				}

				textInputDialog.setTitle("ENTER_SERVER_ADRESS");
				textInputDialog.show(v,buttons,canclebleCheckbox.selected);
			}

			private function onCloseTextInputDialogHandler(event:NativeDialogEvent):void
			{
				event.preventDefault();
				for each (var n:NativeTextField in NativeTextInputDialog(event.target).textInputs) 
				{
					if(n.name)
						mess("  "+n.name+":  "+n.text);
				}
				mess(event.toString());
				
				textInputDialog.removeEventListener(NativeDialogEvent.CANCELED,onCancleTextInputDialogHandler);
				textInputDialog.removeEventListener(NativeDialogEvent.CLOSED,onCloseTextInputDialogHandler);
				textInputDialog.removeEventListener(NativeDialogEvent.OPENED,traceEvent);
				textInputDialog.removeEventListener(ErrorEvent.ERROR,onError);
			
			}
			public function onCancleTextInputDialogHandler(event:NativeDialogEvent):void
			{
				event.preventDefault();
				mess(event.toString());
				
				textInputDialog.removeEventListener(NativeDialogEvent.CANCELED,onCancleTextInputDialogHandler);
				textInputDialog.removeEventListener(NativeDialogEvent.CLOSED,onCloseTextInputDialogHandler);
				textInputDialog.removeEventListener(NativeDialogEvent.OPENED,traceEvent);
				textInputDialog.removeEventListener(ErrorEvent.ERROR,onError);

			}
			
			
			public function mess(message:String):void
			{
				returnText.appendText(message+"\n");
				trace(message+"\n");
				try{
					SystemProperties.getInstance().console(message);
				}catch(error:Error){
					trace(error);
				}
			}
			
			
			
			
			//---------------------------------------------------------------------
			//
			// NativeListDialog
			//
			//---------------------------------------------------------------------
			public function openSingleChoiceDialog(event:MouseEvent):void
			{
				singleChDialog = new NativeListDialog();
				singleChDialog.theme = ThemeSelector.selectedItem.data;
				
				singleChDialog.addEventListener(NativeDialogEvent.CANCELED,closeNativeDialogHandler);

				singleChDialog.addEventListener(NativeDialogEvent.CLOSED,closeNativeDialogHandler);
				singleChDialog.addEventListener(ErrorEvent.ERROR,onError);
				singleChDialog.addEventListener(NativeDialogListEvent.LIST_CHANGE,onListChange);
				
				var a:Array = otherLabels.text.split(",");
				var buttons:Vector.<String> = new Vector.<String>();
				if(a==null || a.length==0)
					buttons.push(closeLabelInput.text);
				else{
					a.unshift(closeLabelInput.text);
					for each (var button:String in a) 
					{
						buttons.push(button);
					}
				}
				singleChDialog.buttons = buttons;
				singleChDialog.setTitle(titleInput.text);
				singleChDialog.setCancelable(canclebleCheckbox.selected);
				singleChDialog.showSingleChoice(choces,selectedIndex);

			}
			
			
			protected function openMultiChoiceDialog(event:MouseEvent):void
			{
				multChDialog = new NativeListDialog();
				multChDialog.theme = ThemeSelector.selectedItem.data;
				
				multChDialog.addEventListener(NativeDialogEvent.CANCELED,closeNativeDialogHandler);

				multChDialog.addEventListener(NativeDialogEvent.CLOSED,closeNativeDialogHandler);
				multChDialog.addEventListener(ErrorEvent.ERROR,onError);
				multChDialog.addEventListener(NativeDialogListEvent.LIST_CHANGE,onListChange);
				var a:Array = otherLabels.text.split(",");
				var buttons:Vector.<String> = new Vector.<String>();
				if(a==null || a.length==0)
					buttons.push(closeLabelInput.text);
				else{
					a.unshift(closeLabelInput.text);
					for each (var button:String in a) 
					{
						buttons.push(button);
					}
				}
				multChDialog.buttons = buttons;
				multChDialog.setTitle(titleInput.text);
				multChDialog.setCancelable(canclebleCheckbox.selected);
				multChDialog.showMultiChoice(choces,checkedItems);

			}
			
			private function onListChange(event:NativeDialogListEvent):void
			{
				
				var dialog:NativeListDialog = (event.target as NativeListDialog)
				mess(event.toString());
				const a:Vector.<String> = dialog.selectedLabels;
				mess("selectedLabels :");
				if(a.length>0){
					for (var i:int = 0; i < a.length; i++) 
					{
						mess("   "+a[i]);
					}
				}
					 
			}
			public function closeNativeDialogHandler(event:NativeDialogEvent):void
			{
				event.preventDefault();
				mess(event.toString());
				var dialog:NativeListDialog = (event.target  as NativeListDialog);
				
			}
			
			protected function togglebutton1_changeHandler(event:Event):void
			{
				NativeProgress.showNetworkActivityIndicator(ToggleSwitch(event.target).selected);
			}
			
			protected function spinner1_changeHandler(event:IndexChangeEvent):void
			{
				//NativeAlert.badge = event.newIndex;
				SystemProperties.getInstance().badge = event.newIndex;
				mess(" setting the badge:  "+event.newIndex);
				
				
			}
			
			protected function showNotification(event:MouseEvent):void
			{
				NativeNotifiction.notifi(messageInput.text,new Date(),closeLabelInput.text);
			}

			
			
			
		]]>
	</fx:Script>
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		
		.myTextInputStyle {
			skinClass: ClassReference("spark.skins.mobile.TextInputSkin");
		}
		.myTextAreaStyle {
			skinClass: ClassReference("spark.skins.mobile.TextAreaSkin");
		}
	</fx:Style>
	<fx:Declarations>
		<s:ArrayList id="themesAndroid">
			<fx:Object name="ANDROID_DEVICE_DEFAULT_DARK_THEME" data="0x00000004"/>
			<fx:Object name="ANDROID_DEVICE_DEFAULT_LIGHT_THEME" data="0x00000005"/>
			<fx:Object name="ANDROID_HOLO_DARK_THEME" data="0x00000002"/>
			<fx:Object name="ANDROID_HOLO_LIGHT_THEME" data="0x00000003"/>
			<fx:Object name="DEFAULT_THEME" data="0x00000001"/>
		</s:ArrayList>
		<s:ArrayList id="themesIOS">
			<fx:Object name="IOS_SVHUD_GRADIENT_BACKGROUND_THEME" data="0x00000004" />
			<fx:Object name="IOS_SVHUD_BLACK_BACKGROUND_THEME" data="0x00000002" />
			<fx:Object name="IOS_SVHUD_NON_BACKGROUND_THEME" data="0x00000003" />
			<fx:Object name="DEFAULT_THEME" data="0x00000001"/>
		</s:ArrayList>
	</fx:Declarations>

	<s:states>
		<s:State name="phone"/>
		<s:State name="tablet"/>
	</s:states>
	
	<s:Scroller height="100%" width="100%">
		<s:VGroup width="100%" height="100%" horizontalAlign="center">
			<s:Group height="100%" width="100%" id="content">
				<s:SpinnerListContainer includeInLayout="{SystemProperties.isBadgeSupported()}">
					<s:SpinnerList height="100%" width="100%" typicalItem="999" change="spinner1_changeHandler(event)">
						<s:NumericDataProvider />
					</s:SpinnerList>
				</s:SpinnerListContainer>
				
				<s:Spacer width="100%" visible.phone="false" includeInLayout.phone="false"/>
				<s:VGroup>
					<s:TextInput id="titleInput" styleName="myTextInputStyle"/>
					<s:TextInput id="messageInput" styleName="myTextInputStyle"/>
					<s:TextInput id="closeLabelInput" text="OK" styleName="myTextInputStyle"/>
					<s:TextInput id="otherLabels" text="YES,NO" styleName="myTextInputStyle"/>
					<s:CheckBox id="canclebleCheckbox" label="cancleble" selected="true"/>
				</s:VGroup>
				
				<s:SpinnerListContainer>
					<s:SpinnerList id="ThemeSelector" fontWeight="bold" labelField="name" minWidth="300"/>
				</s:SpinnerListContainer>
				<s:Spacer width="100%"  visible.phone="false" includeInLayout.phone="false"/>
			</s:Group>
			
			<s:HGroup verticalAlign="middle" visible="{NativeProgress.isNetworkActivityIndicatorSupported()}" includeInLayout="{NativeProgress.isNetworkActivityIndicatorSupported()}" >
				<s:ToggleSwitch label="SnetworkActivityIndicator"  change="togglebutton1_changeHandler(event)"/>
				<s:Label text="Snetwork Activity Indicator"/>
			</s:HGroup>
			
			<s:Button width="100%" click="callAlert(event)" label="call native Alert" height="60"/>
			
			<s:VGroup width="100%" height="100%" >
				
				<s:HGroup width="100%" includeInLayout="{NativeProgress.isSupported}" verticalAlign="middle">
					<s:Button width="100%" label="horizontal progress popup" click="openProgressPopup(NativeProgress.STYLE_HORIZONTAL)" height="60"/>
					<s:CheckBox id="indeterminateInput" label="indeterminate" selected="{Capabilities.os.toLowerCase().indexOf('iph')==-1}"/>
					<s:Button width="100%" label="spinner progress popup" click="openProgressPopup(NativeProgress.STYLE_SPINNER)" height="60"/>
				</s:HGroup>
				<s:HGroup width="100%" includeInLayout="{NativeListDialog.isSupported}">
					<s:Button width="100%" click="openMultiChoiceDialog(event)" label="open Multi Choice Dialog" height="60" />
					<s:Button width="100%" click="openSingleChoiceDialog(event)" label="open Single Choice Dialog" height="60" />
				</s:HGroup>
				<s:HGroup width="100%"  includeInLayout="{Toast.isSupported}" >
					<s:Button width="100%" click="showToast(event)" label="show Toast" height="60"/>
					<s:Button width="100%" click="showCenteredToast(event)" label="show Toast in random gravity" height="60"/>
				</s:HGroup>
				<s:Button width="100%" click="showNotification(event)" label="dispach Notification" height="60" includeInLayout="{NativeNotifiction.isSupported}" />
				<s:Button width="100%" click="openTextInputDialog(event)" label="open Text Input Dialog" height="60" includeInLayout="{NativeTextInputDialog.isSupported}" />
			</s:VGroup>
			
			<s:TextArea id="returnText" width="100%" height="100%" minHeight="200" selectable="false" editable="false" styleName="myTextAreaStyle "/>
		</s:VGroup>
	</s:Scroller>
	
</s:View>
