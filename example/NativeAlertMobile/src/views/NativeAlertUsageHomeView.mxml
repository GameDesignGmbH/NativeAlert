<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" title="Native Alerts" viewActivate="view1_viewActivateHandler(event)" 
		>
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			
			import pl.mateuszmackowiak.nativeANE.NativeAlert;
			import pl.mateuszmackowiak.nativeANE.NativeAlertEvent;
			
			import spark.events.IndexChangeEvent;
			import spark.events.ViewNavigatorEvent;
			
			
			
			
			private function closeFun(event:NativeAlertEvent):void
			{
				var n:NativeAlert = event.target as NativeAlert;
				returnText.text+= "the answer: "+event.index+"\n";
				
			}
			protected function view1_viewActivateHandler(event:ViewNavigatorEvent):void
			{
				FlexGlobals.topLevelApplication.addEventListener(UncaughtErrorEvent.UNCAUGHT_ERROR,onError);
				NativeApplication.nativeApplication.addEventListener(Event.EXITING,exiting);
								
				if(NativeAlert.isSupported){
					returnText.text+= "extension IS supported on this device\n";
				}else{
					returnText.text+= "extension is NOT supported on this device\n";
				}
			}
			
			protected function exiting(event:Event):void
			{
				NativeAlert.dispose();
			}
			
			
			private function onError(event:*):void
			{
				if(event is UncaughtErrorEvent){
					const e:UncaughtErrorEvent = event;
					if(e.error is Error)
						returnText.text += "UncaughtErrorEvent Error "+ (e.error as Error).message+"   "+(e.error as Error).toString()+"\n";
					else
						returnText.text += "UncaughtErrorEvent ErrorEvent "+ (e.error as ErrorEvent).text+"   "+(e.error as ErrorEvent).toString()+"\n";
				}else
					returnText.text += "Error "+ event.text+"   "+event.toString()+"\n";
			}
			
			
			protected function callPopup(event:MouseEvent):void
			{
				if(Capabilities.os.indexOf('Linux')>-1)
					NativeAlert.show(messageInput.text,titleInput.text,closeLabelInput.text, otherLabels.text , closeFun,ThemeSelector.selectedItem.data);
				else
					NativeAlert.show(messageInput.text,titleInput.text,closeLabelInput.text, otherLabels.text , closeFun,NativeAlert.THEME_DEVICE_DEFAULT_DARK);
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<s:ArrayList id="themes">
			<fx:Object name="THEME_DEVICE_DEFAULT_DARK" data="0x00000004"/>
			<fx:Object name="THEME_DEVICE_DEFAULT_LIGHT" data="0x00000005"/>
			<fx:Object name="THEME_HOLO_DARK" data="0x00000002"/>
			<fx:Object name="THEME_HOLO_LIGHT" data="0x00000003"/>
			<fx:Object name="THEME_TRADITIONAL" data="0x00000001"/>
		</s:ArrayList>
	</fx:Declarations>
	<s:layout>
		<s:VerticalLayout horizontalAlign="center"/>
	</s:layout>
	<s:Spacer height="100%" />
	
	<s:TextInput id="titleInput" text="Some Title" />
	<s:TextInput id="messageInput" text="Some Message Text" />
	<s:TextInput id="closeLabelInput" text="OK" />
	<s:TextInput id="otherLabels" text="YES,NO" />
	<s:SpinnerListContainer includeInLayout="{Capabilities.os.indexOf('Linux')>-1}">
		<s:SpinnerList id="ThemeSelector" fontWeight="bold" labelField="name" minWidth="300" dataProvider="{themes}" selectedItem="{themes.getItemAt(0)}"/>
	</s:SpinnerListContainer>
	
	<s:Spacer height="100%" />
	
	<s:Button width="100%" click="callPopup(event)" label="call native Alert" height="60"/>
	<s:TextArea id="returnText" width="100%" height="100%" selectable="false" editable="false"/>
		
	<s:Spacer height="100%"/>
</s:View>
